p.note Everything here is experimental, and the API is no exception, so expect things to change in future releases.

#api
  #find
    p The KeyMap finder API lets you easily find records using the indexes.
    p The API is chainable, so you can easily do things like:
  
    pre
      code
        | // find all users with age > 29 AND <= 35 and of the feminine sex
        | db.users.find({age: {$gt: 29, $lte: 35}, sex: {$eq: 'f'}}) (function(err, key, value) {
        |   if (err) { next(err); return; }
        |   console.log('(1) got ' + key); // I get called once for every matched record
        | })
        | .reset() // reset query
        | .where({age: {$gt: 29, $lt: 42}}) // find all users with age > 29 and < 42
        |   (function(err, key, value) {
        |     if (err) { next(err); return; }
        |     console.log('(2) got ' + key); // I get called once for every matched record
        |   })
        | .reset() // reset query
        | .where({age: {$gt: 29, $lt: 35}})
        | .or({sex: {$eq: 'f'}})  // find all users with age > 29 and <= 35 OR of the feminine sex
        | (function(err, key, value) {
        |   if (err) { next(err); return; }
        |   console.log('(3) got ' + key);
        | })
        | .bulk(function(err, records) {
        |   if (err) { next(err); return; }
        |   console.log('Found ' + records.length + ' matching records');
        |   records.forEach(function(record) {
        |     console.log('(4) got ' + record.key);
        |     // can also access record.value
        |   });
        | });

  h1 Chainable elements
  
  p All chainable elements can be chained to each other, building a query and retrieving the results.
  
  h2 find (spec)
  p Prepares query, gathering records according to spec. Starts chain.
  p
    ul
      li
        p <b>spec</b>: specification of which indexes and operators to run.
        p Takes an object. Each key of the object is the name of an index, and each value is an operators spec.
        p See <a href="/api/find/operators">all available operators</a>.
  h3 Example:
  p <i>users</i> is a key map with indexes <i>age</i> and <i>sex</i>.
  p To find all users with age > 29 and <= 35 and of sex == 'f' do:
  p
    pre
      code
        | var chainable = db.users.find({age : {$gt: 29, $lte: 35}, sex: {$eq: 'f'}})
  p This returns a chainable object which you can activate by invoking it like this:
  p
    pre
      code
        | chainable(function(err, key, value) {
        |   console.log('got ' + key);
        | });
  p Or, all together:
  p
    pre
      code
        | var chainable = db.users.find({age : {$gt: 29, $lte: 35}, sex: {$eq: 'f'}})
        |    (function(err, key, value) {
        |       console.log('got ' + key);
        |    });

  h2 .order (index_spec)
  p Values returned will be ordered accorgin to index_spec.
  p
    ul
      li <b>index_spec</b>: format: "&lt;index&gt;" or "&lt;index&gt; ASC" or "&lt;index&gt; DESC". The index may be in the query or not. It must exist on the key_map, though.
  h3 Example:
  p
    pre
      code
        | db.users.find({age : {$gt: 29, $lte: 35}, sex: {$eq: 'f'}}).order('age DESC')
  
  h2 .reset ()
  p Resets the query. Finder is invalid after this.
  
  h2 .where (spec)
  p Overrides the query to spec.
  p
    ul
      li <b>spec</b>: must follow the same spec as find(spec).
  
  h2 .or (spec)
  p Adds an alternative condition to the already existing one.
  p
    ul
      li <b>spec</b>: must follow the same spec as find(spec).
      
  h2 .limit (limit)
  p Sets a limit on the returned number of objects
  p
    ul
      li <b>limit</b>: integer > 0
  
  h2 .first ()
  p The same as <i>.limit(1)</i>.

  h2 .offset (x)
  p Ignore the first x objects
  p
    ul
      li <b>x</b>: integer >= 0
      
  h2 .all (callback)
  p Get all the objects at once, on one callback.
  p
    ul
      li
        p <b>callback</b> (err, records): called when there is an error or when all records are retrieved.
        p <i>records</i> is an Array of objects with <i>key</i> and <i>value</i> attributes.
        
  h2 .stream ([callback])
  p Starts a results stream.
  p
    ul
      li <b>callback</b> (stream): optional. Pass this in if you want the callback-style to keep chaining.
  p <b>returns</b> a stream if no callback is given.
  h3 Example:
  p
    pre
      code
        | var stream = db.users.find({age : {$gt: 29, $lte: 35}, sex: {$eq: 'f'}}).stream();
        | stream.on('record', function(record) {
        |   console.log(record);
        | });
        | stream.on('error', function(err) {
        |   throw(err);
        | });
        | stream.on('end', function() {
        |   console.log('ended');
        | });